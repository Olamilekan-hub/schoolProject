// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  passwordHash String  @map("password_hash")
  firstName   String   @map("first_name")
  lastName    String   @map("last_name")
  phone       String?
  department  String?
  employeeId  String?  @unique @map("employee_id")
  isActive    Boolean  @default(true) @map("is_active")
  role        UserRole @default(TEACHER)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  courses           Course[]
  attendanceSessions AttendanceSession[]
  attendanceRecords AttendanceRecord[] @relation("MarkedBy")
  studentsRegistered Student[]         @relation("RegisteredBy")
  systemLogs        SystemLog[]

  @@map("users")
}

model Student {
  id               String    @id @default(uuid())
  matricNumber     String    @unique @map("matric_number")
  firstName        String    @map("first_name")
  lastName         String    @map("last_name")
  middleName       String?   @map("middle_name")
  email            String?
  phone            String?
  gender           Gender?
  dateOfBirth      DateTime? @map("date_of_birth") @db.Date
  level            String    @default("100")
  department       String?
  faculty          String?
  status           StudentStatus @default(ACTIVE)
  registeredById   String    @map("registered_by")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  registeredBy      User               @relation("RegisteredBy", fields: [registeredById], references: [id])
  studentCourses    StudentCourse[]
  attendanceRecords AttendanceRecord[]
  biometricTemplates BiometricTemplate[]

  @@map("students")
}

model Course {
  id           String  @id @default(uuid())
  courseCode   String  @unique @map("course_code")
  courseTitle  String  @map("course_title")
  description  String?
  creditUnits  Int     @default(3) @map("credit_units")
  semester     String  @default("FIRST")
  academicYear String  @default("2024/2025") @map("academic_year")
  teacherId    String  @map("teacher_id")
  isActive     Boolean @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  teacher           User               @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  studentCourses    StudentCourse[]
  attendanceSessions AttendanceSession[]

  @@map("courses")
}

model StudentCourse {
  id             String              @id @default(uuid())
  studentId      String              @map("student_id")
  courseId       String              @map("course_id")
  enrollmentDate DateTime            @default(now()) @map("enrollment_date")
  status         StudentCourseStatus @default(ENROLLED)

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course  Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId])
  @@map("student_courses")
}

model AttendanceSession {
  id                  String    @id @default(uuid())
  courseId            String    @map("course_id")
  teacherId           String    @map("teacher_id")
  sessionName         String    @map("session_name")
  sessionDate         DateTime  @map("session_date") @db.Date
  startTime           DateTime  @map("start_time") @db.Time
  endTime             DateTime? @map("end_time") @db.Time
  attendanceLinkToken String?   @unique @map("attendance_link_token")
  linkExpiresAt       DateTime? @map("link_expires_at")
  allowRemoteMarking  Boolean   @default(false) @map("allow_remote_marking")
  status              SessionStatus @default(OPEN)
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  // Relations
  course            Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  teacher           User               @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  attendanceRecords AttendanceRecord[]

  @@map("attendance_sessions")
}

model AttendanceRecord {
  id                     String              @id @default(uuid())
  sessionId              String              @map("session_id")
  studentId              String              @map("student_id")
  markedAt               DateTime            @default(now()) @map("marked_at")
  status                 AttendanceStatus    @default(PRESENT)
  verificationMethod     VerificationMethod  @default(BIOMETRIC) @map("verification_method")
  biometricVerified      Boolean             @default(false) @map("biometric_verified")
  verificationConfidence Decimal?            @map("verification_confidence") @db.Decimal(5,2)
  ipAddress              String?             @map("ip_address")
  userAgent              String?             @map("user_agent")
  deviceInfo             Json?               @map("device_info")
  markedById             String?             @map("marked_by")
  remarks                String?

  // Relations
  session   AttendanceSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  student   Student           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  markedBy  User?             @relation("MarkedBy", fields: [markedById], references: [id])

  @@unique([sessionId, studentId])
  @@map("attendance_records")
}

model BiometricTemplate {
  id               String          @id @default(uuid())
  studentId        String          @map("student_id")
  templateData     String          @map("template_data")
  templateType     BiometricType   @default(FINGERPRINT) @map("template_type")
  qualityScore     Decimal?        @map("quality_score") @db.Decimal(5,2)
  enrollmentDevice Json?           @map("enrollment_device")
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, templateType])
  @@map("biometric_templates")
}

model SystemLog {
  id           String   @id @default(uuid())
  userId       String?  @map("user_id")
  action       String
  resourceType String   @map("resource_type")
  resourceId   String?  @map("resource_id")
  details      Json?
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@map("system_logs")
}

// Enums
enum UserRole {
  TEACHER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum StudentStatus {
  ACTIVE
  INACTIVE
  GRADUATED
}

enum StudentCourseStatus {
  ENROLLED
  DROPPED
  COMPLETED
}

enum SessionStatus {
  OPEN
  CLOSED
  CANCELLED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum VerificationMethod {
  BIOMETRIC
  MANUAL
  LINK
}

enum BiometricType {
  FINGERPRINT
  FACE
}