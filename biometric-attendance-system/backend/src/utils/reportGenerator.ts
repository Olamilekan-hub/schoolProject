// backend/src/utils/reportGenerator.ts - Report Generation Utilities  
import PDFDocument from 'pdfkit'
import ExcelJS from 'exceljs'
import { format } from 'date-fns'
import { logger } from './logger'

interface ReportData {
  reportInfo?: {
    generatedAt: string
    generatedBy: string
    period: {
      startDate?: string
      endDate?: string
    }
    filters?: any
  }
  statistics?: {
    totalSessions: number
    totalRecords: number
    averageAttendance: number
    enrolledStudents: number
    totalCourses: number
  }
  courses?: Array<{
    id: string
    courseCode: string
    courseTitle: string
  }>
  sessions?: Array<{
    sessionId: string
    sessionName: string
    sessionDate: string
    courseCode: string
    courseTitle: string
    presentCount: number
    totalMarked: number
    attendancePercentage: number
  }>
  students?: Array<{
    student: {
      firstName: string
      lastName: string
      matricNumber: string
    }
    totalSessions: number
    attendedSessions: number
    attendancePercentage: number
    records: Array<{
      sessionId: string
      sessionName: string
      sessionDate: string
      status: string
      markedAt: string
    }>
  }>
}

export async function generatePDFReport(reportData: ReportData): Promise<Buffer> {
  return new Promise((resolve, reject) => {
    try {
      const doc = new PDFDocument({ 
        margin: 50,
        size: 'A4',
        info: {
          Title: 'Attendance Report',
          Author: 'Biometric Attendance System',
          Subject: 'Student Attendance Report',
          Creator: 'BiometricAMS'
        }
      })
      const chunks: Buffer[] = []

      doc.on('data', chunk => chunks.push(chunk))
      doc.on('end', () => resolve(Buffer.concat(chunks)))
      doc.on('error', reject)

      // Colors
      const primaryColor = '#2563eb'
      const secondaryColor = '#64748b'
      const accentColor = '#10b981'

      // Header
      doc.fillColor(primaryColor)
        .fontSize(24)
        .font('Helvetica-Bold')
        .text('Attendance Report', { align: 'center' })
      
      doc.moveDown(0.5)
      
      // Subtitle
      doc.fillColor(secondaryColor)
        .fontSize(12)
        .font('Helvetica')
        .text('Biometric Attendance Management System', { align: 'center' })

      doc.moveDown(1)

      // Report info section
      if (reportData.reportInfo) {
        doc.fillColor('#000000')
          .fontSize(10)
          .font('Helvetica')
        
        const reportInfo = reportData.reportInfo
        doc.text(`Generated: ${format(new Date(reportInfo.generatedAt), 'PPP p')}`)
        doc.text(`Generated by: ${reportInfo.generatedBy}`)
        
        if (reportInfo.period.startDate && reportInfo.period.endDate) {
          doc.text(`Report Period: ${reportInfo.period.startDate} to ${reportInfo.period.endDate}`)
        }
        
        doc.moveDown(1)
      }

      // Statistics section
      if (reportData.statistics) {
        doc.fillColor(primaryColor)
          .fontSize(16)
          .font('Helvetica-Bold')
          .text('Summary Statistics')
        
        doc.moveDown(0.5)
        
        doc.fillColor('#000000')
          .fontSize(12)
          .font('Helvetica')
        
        const stats = reportData.statistics
        const statsY = doc.y
        
        // Left column
        doc.text(`Total Sessions: ${stats.totalSessions}`, 50, statsY)
        doc.text(`Total Attendance Records: ${stats.totalRecords}`, 50, statsY + 20)
        doc.text(`Total Courses: ${stats.totalCourses}`, 50, statsY + 40)
        
        // Right column
        doc.text(`Enrolled Students: ${stats.enrolledStudents}`, 300, statsY)
        doc.text(`Average Attendance: ${stats.averageAttendance}%`, 300, statsY + 20)
        
        doc.y = statsY + 80
        doc.moveDown(1)
      }

      // Sessions table
      if (reportData.sessions && reportData.sessions.length > 0) {
        doc.fillColor(primaryColor)
          .fontSize(16)
          .font('Helvetica-Bold')
          .text('Session Details')
        
        doc.moveDown(0.5)
        
        // Table headers
        const tableTop = doc.y
        const rowHeight = 25
        const colWidths = [120, 80, 80, 60, 60, 60]
        const colPositions = [50, 170, 250, 330, 390, 450]
        
        // Header background
        doc.rect(50, tableTop, 500, rowHeight)
          .fillAndStroke('#f8fafc', '#e2e8f0')
        
        // Header text
        doc.fillColor('#1e293b')
          .fontSize(10)
          .font('Helvetica-Bold')
        
        doc.text('Session Name', colPositions[0] + 5, tableTop + 8)
        doc.text('Course', colPositions[1] + 5, tableTop + 8)
        doc.text('Date', colPositions[2] + 5, tableTop + 8)
        doc.text('Present', colPositions[3] + 5, tableTop + 8)
        doc.text('Total', colPositions[4] + 5, tableTop + 8)
        doc.text('Rate', colPositions[5] + 5, tableTop + 8)
        
        // Table rows
        doc.fillColor('#000000')
          .fontSize(9)
          .font('Helvetica')
        
        reportData.sessions.forEach((session, index) => {
          const y = tableTop + (index + 1) * rowHeight
          
          // Alternate row colors
          if (index % 2 === 0) {
            doc.rect(50, y, 500, rowHeight)
              .fillAndStroke('#f8fafc', '#f1f5f9')
          }
          
          // Row data
          doc.fillColor('#000000')
          doc.text(session.sessionName.substring(0, 18), colPositions[0] + 5, y + 8)
          doc.text(session.courseCode, colPositions[1] + 5, y + 8)
          doc.text(format(new Date(session.sessionDate), 'MMM dd'), colPositions[2] + 5, y + 8)
          doc.text(`${session.presentCount}`, colPositions[3] + 5, y + 8)
          doc.text(`${session.totalMarked}`, colPositions[4] + 5, y + 8)
          doc.text(`${session.attendancePercentage}%`, colPositions[5] + 5, y + 8)
        })
        
        doc.y = tableTop + (reportData.sessions.length + 1) * rowHeight + 20
      }

      // Students summary
      if (reportData.students && reportData.students.length > 0) {
        // Add new page if needed
        if (doc.y > 700) {
          doc.addPage()
        }
        
        doc.fillColor(primaryColor)
          .fontSize(16)
          .font('Helvetica-Bold')
          .text('Student Attendance Summary')
        
        doc.moveDown(0.5)
        
        // Show top 10 students
        const topStudents = reportData.students
          .sort((a, b) => b.attendancePercentage - a.attendancePercentage)
          .slice(0, 10)
        
        const studentTableTop = doc.y
        const studentRowHeight = 20
        const studentColPositions = [50, 200, 320, 400, 480]
        
        // Header
        doc.rect(50, studentTableTop, 500, studentRowHeight)
          .fillAndStroke('#f8fafc', '#e2e8f0')
        
        doc.fillColor('#1e293b')
          .fontSize(10)
          .font('Helvetica-Bold')
        
        doc.text('Student Name', studentColPositions[0] + 5, studentTableTop + 6)
        doc.text('Matric Number', studentColPositions[1] + 5, studentTableTop + 6)
        doc.text('Attended', studentColPositions[2] + 5, studentTableTop + 6)
        doc.text('Total', studentColPositions[3] + 5, studentTableTop + 6)
        doc.text('Rate', studentColPositions[4] + 5, studentTableTop + 6)
        
        // Student rows
        doc.fillColor('#000000')
          .fontSize(9)
          .font('Helvetica')
        
        topStudents.forEach((studentData, index) => {
          const y = studentTableTop + (index + 1) * studentRowHeight
          
          if (index % 2 === 0) {
            doc.rect(50, y, 500, studentRowHeight)
              .fillAndStroke('#f8fafc', '#f1f5f9')
          }
          
          const student = studentData.student
          const fullName = `${student.firstName} ${student.lastName}`
          
          doc.fillColor('#000000')
          doc.text(fullName.substring(0, 20), studentColPositions[0] + 5, y + 6)
          doc.text(student.matricNumber, studentColPositions[1] + 5, y + 6)
          doc.text(`${studentData.attendedSessions}`, studentColPositions[2] + 5, y + 6)
          doc.text(`${studentData.totalSessions}`, studentColPositions[3] + 5, y + 6)
          
          // Color code attendance rate
          const rate = studentData.attendancePercentage
          if (rate >= 75) {
            doc.fillColor(accentColor)
          } else if (rate >= 50) {
            doc.fillColor('#f59e0b')
          } else {
            doc.fillColor('#ef4444')
          }
          doc.text(`${rate}%`, studentColPositions[4] + 5, y + 6)
        })
      }

      // Footer
      doc.fontSize(8)
        .fillColor(secondaryColor)
        .text(
          `Generated on ${format(new Date(), 'PPP')} | Page ${doc.bufferedPageRange().count}`,
          50,
          750,
          { align: 'center' }
        )

      doc.end()
    } catch (error) {
      logger.error('PDF generation error:', error)
      reject(error)
    }
  })
}

export async function generateExcelReport(reportData: ReportData): Promise<Buffer> {
  try {
    const workbook = new ExcelJS.Workbook()
    
    // Set workbook properties
    workbook.creator = 'Biometric Attendance System'
    workbook.created = new Date()
    workbook.modified = new Date()
    workbook.lastPrinted = new Date()
    
    // Report Info Sheet
    const infoSheet = workbook.addWorksheet('Report Summary', {
      headerFooter: {
        firstHeader: 'Attendance Report - Biometric AMS'
      }
    })
    
    // Title
    infoSheet.mergeCells('A1:D1')
    const titleCell = infoSheet.getCell('A1')
    titleCell.value = 'Attendance Report'
    titleCell.font = { name: 'Calibri', size: 20, bold: true, color: { argb: '2563eb' } }
    titleCell.alignment = { horizontal: 'center' }
    
    infoSheet.addRow([])
    
    // Report information
    if (reportData.reportInfo) {
      infoSheet.addRow(['Generated:', format(new Date(reportData.reportInfo.generatedAt), 'PPP p')])
      infoSheet.addRow(['Generated by:', reportData.reportInfo.generatedBy])
      if (reportData.reportInfo.period.startDate) {
        infoSheet.addRow(['Period:', `${reportData.reportInfo.period.startDate} to ${reportData.reportInfo.period.endDate}`])
      }
      infoSheet.addRow([])
    }
    
    // Statistics
    if (reportData.statistics) {
      infoSheet.addRow(['Statistics'])
      const statsHeaderRow = infoSheet.lastRow
      statsHeaderRow!.font = { bold: true, color: { argb: '1e293b' } }
      
      const stats = reportData.statistics
      infoSheet.addRow(['Total Sessions:', stats.totalSessions])
      infoSheet.addRow(['Total Records:', stats.totalRecords])
      infoSheet.addRow(['Enrolled Students:', stats.enrolledStudents])
      infoSheet.addRow(['Average Attendance:', `${stats.averageAttendance}%`])
      infoSheet.addRow(['Total Courses:', stats.totalCourses])
    }
    
    // Auto-fit columns
    infoSheet.columns = [
      { width: 20 },
      { width: 30 },
      { width: 15 },
      { width: 15 }
    ]

    // Sessions Sheet
    if (reportData.sessions && reportData.sessions.length > 0) {
      const sessionsSheet = workbook.addWorksheet('Sessions')
      
      // Headers
      const headers = [
        'Session Name', 'Course Code', 'Course Title', 'Date', 
        'Present Count', 'Total Marked', 'Attendance %'
      ]
      
      const headerRow = sessionsSheet.addRow(headers)
      headerRow.font = { bold: true, color: { argb: 'ffffff' } }
      headerRow.fill = {
        type: 'pattern',
        pattern: 'solid',
        fgColor: { argb: '2563eb' }
      }
      
      // Data rows
      reportData.sessions.forEach((session, index) => {
        const row = sessionsSheet.addRow([
          session.sessionName,
          session.courseCode,
          session.courseTitle,
          format(new Date(session.sessionDate), 'yyyy-MM-dd'),
          session.presentCount,
          session.totalMarked,
          session.attendancePercentage
        ])
        
        // Alternate row colors
        if (index % 2 === 0) {
          row.fill = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: 'f8fafc' }
          }
        }
        
        // Color code attendance percentage
        const percentageCell = row.getCell(7)
        if (session.attendancePercentage >= 75) {
          percentageCell.font = { color: { argb: '10b981' }, bold: true }
        } else if (session.attendancePercentage >= 50) {
          percentageCell.font = { color: { argb: 'f59e0b' }, bold: true }
        } else {
          percentageCell.font = { color: { argb: 'ef4444' }, bold: true }
        }
      })
      
      // Auto-fit columns
      sessionsSheet.columns.forEach(column => {
        column.width = 15
      })
      sessionsSheet.getColumn(1).width = 25 // Session name
      sessionsSheet.getColumn(3).width = 30 // Course title
    }

    // Students Sheet
    if (reportData.students && reportData.students.length > 0) {
      const studentsSheet = workbook.addWorksheet('Students')
      
      // Headers
      const studentHeaders = [
        'Matric Number', 'Student Name', 'Total Sessions', 
        'Attended Sessions', 'Attendance %', 'Status'
      ]
      
      const studentHeaderRow = studentsSheet.addRow(studentHeaders)
      studentHeaderRow.font = { bold: true, color: { argb: 'ffffff' } }
      studentHeaderRow.fill = {
        type: 'pattern',
        pattern: 'solid',
        fgColor: { argb: '2563eb' }
      }
      
      // Data rows
      reportData.students.forEach((studentData, index) => {
        const student = studentData.student
        const attendanceRate = studentData.attendancePercentage
        
        let status = 'Poor'
        if (attendanceRate >= 75) status = 'Good'
        else if (attendanceRate >= 50) status = 'Average'
        
        const row = studentsSheet.addRow([
          student.matricNumber,
          `${student.firstName} ${student.lastName}`,
          studentData.totalSessions,
          studentData.attendedSessions,
          attendanceRate,
          status
        ])
        
        // Alternate row colors
        if (index % 2 === 0) {
          row.fill = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: 'f8fafc' }
          }
        }
        
        // Color code attendance and status
        const percentageCell = row.getCell(5)
        const statusCell = row.getCell(6)
        
        if (attendanceRate >= 75) {
          percentageCell.font = { color: { argb: '10b981' }, bold: true }
          statusCell.font = { color: { argb: '10b981' }, bold: true }
        } else if (attendanceRate >= 50) {
          percentageCell.font = { color: { argb: 'f59e0b' }, bold: true }
          statusCell.font = { color: { argb: 'f59e0b' }, bold: true }
        } else {
          percentageCell.font = { color: { argb: 'ef4444' }, bold: true }
          statusCell.font = { color: { argb: 'ef4444' }, bold: true }
        }
      })
      
      // Auto-fit columns
      studentsSheet.columns.forEach(column => {
        column.width = 15
      })
      studentsSheet.getColumn(2).width = 25 // Student name
    }

    // Fix: Use 'unknown' type conversion for Buffer if needed
    return workbook.xlsx.writeBuffer() as unknown as Buffer;
  } catch (error) {
    logger.error('Excel generation error:', error)
    throw error
  }
}

export async function generateCSVReport(reportData: ReportData): Promise<Buffer> {
  try {
    let csvContent = 'Attendance Report\n\n'
    
    // Report info
    if (reportData.reportInfo) {
      csvContent += `Generated,${format(new Date(reportData.reportInfo.generatedAt), 'PPP p')}\n`
      csvContent += `Generated by,${reportData.reportInfo.generatedBy}\n`
      if (reportData.reportInfo.period.startDate) {
        csvContent += `Period,${reportData.reportInfo.period.startDate} to ${reportData.reportInfo.period.endDate}\n`
      }
      csvContent += '\n'
    }
    
    // Statistics
    if (reportData.statistics) {
      csvContent += 'Statistics\n'
      csvContent += `Total Sessions,${reportData.statistics.totalSessions}\n`
      csvContent += `Total Records,${reportData.statistics.totalRecords}\n`
      csvContent += `Enrolled Students,${reportData.statistics.enrolledStudents}\n`
      csvContent += `Average Attendance,${reportData.statistics.averageAttendance}%\n`
      csvContent += `Total Courses,${reportData.statistics.totalCourses}\n\n`
    }
    
    // Sessions
    if (reportData.sessions && reportData.sessions.length > 0) {
      csvContent += 'Sessions\n'
      csvContent += 'Session Name,Course Code,Course Title,Date,Present Count,Total Marked,Attendance %\n'
      
      reportData.sessions.forEach((session) => {
        csvContent += `"${session.sessionName}","${session.courseCode}","${session.courseTitle}",`
        csvContent += `"${format(new Date(session.sessionDate), 'yyyy-MM-dd')}",`
        csvContent += `${session.presentCount},${session.totalMarked},${session.attendancePercentage}\n`
      })
      csvContent += '\n'
    }
    
    // Students
    if (reportData.students && reportData.students.length > 0) {
      csvContent += 'Students\n'
      csvContent += 'Matric Number,Student Name,Total Sessions,Attended Sessions,Attendance %\n'
      
      reportData.students.forEach((studentData) => {
        const student = studentData.student
        csvContent += `"${student.matricNumber}","${student.firstName} ${student.lastName}",`
        csvContent += `${studentData.totalSessions},${studentData.attendedSessions},${studentData.attendancePercentage}\n`
      })
    }
    
    return Buffer.from(csvContent, 'utf-8')
  } catch (error) {
    logger.error('CSV generation error:', error)
    throw error
  }
}